Description: A basic CloudFormation template for an RDS Aurora cluster, redis cluster and used for all storage type.

Parameters:
  EnvironmentName:
    Description: Environment Type
    Type: String
    Default: Staging
    AllowedValues:
      - Staging
      - Prod

  DatabaseInstanceType:
    Default: db.t3.small
    Description: The instance type to use for the database.
    Type: String

  # TODO: Delete this parameter and use secret manager to pass the redis auth token
  RedisAUTHtoken:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters.
    Description: Redis account AUTH token.
    MaxLength: "41"
    MinLength: "16"
    NoEcho: "true"
    Type: String

  DatabaseSubnets:
    Description: The subnets to place database instances in.
    Type: CommaDelimitedList

  DatabaseSecurityGroup:
    Type: String
    Description: Security groups to apply to the RDS cluster.

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security groups to apply to the Redis cluster.

  AuroraSnapshotArn:
    Description: Leave Blank if N/A. The AWS ARN of the Aurora database backup which you want to start Aurora with. arn:aws:SnapshotID. Go to RDS to copy and paste the ARN
    Type: String
    Default: ""

  RedisBackupName:
    Description: Leave Blank if N/A. The name of the backup you'll restore the redis cluster from.Go to elasticache Backups and copy and paste the Backup name.
    Type: String
    Default: ""

  RedisType:
    Default: cache.t3.micro
    Description: Redis instance types to be used for Elasticache
    Type: String

  # If you want more control of when and how long to backup the aurora database, then uncomment the parameters below
  # and change the configuration in DatabaseCluster to references these parameters
  # DatabaseBackupRetentionPeriod:
  #     Type: Number
  #     Default: 7
  #     Description: The number of days that ElastiCache and Aurora retains automatic snapshots before deleting them.
  # PreferredBackupWindow:
  #     Description: 'The time range (in UTC) when ElastiCache and Aurora  takes a daily snapshot of your node group.'
  #     Type: String
  #     Default: '05:00-09:00'
  #     AllowedPattern: '\d{2}:\d{2}-\d{2}:\d{2}'
  #     ConstraintDescription: 'must be a valid timestamp range, for example 05:00-09:00'
  # PreferredMaintenanceWindow:
  #     Description: 'The weekly time range during which system maintenance can occur.
  #     Use the following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC).'
  #     Type: String
  #     Default: 'sun:22:00-sun:23:30'
  #     AllowedPattern: '(mon|tue|wed|thu|fri|sat|sun):\d{2}:\d{2}-(mon|tue|wed|thu|fri|sat|sun):\d{2}:\d{2}'
  #     ConstraintDescription: 'must be a valid timestamp range with day of week, for example sun:22:00-sun:23:30'

Conditions:
  CreateStagingResources: !Equals [!Ref EnvironmentName, Staging]
  CreateProdResources: !Equals [!Ref EnvironmentName, Prod]
  UseAuroraSnapshot: !Not [!Equals [!Ref AuroraSnapshotArn, ""]]
  UseRedisBackup: !Not [!Equals [!Ref RedisBackupName, ""]]

# TODO: Remove kms key section and import the resource instead
Resources:
  # Data At-rest AWS-managed server-side encryption
  # Warning: If you delete an encryption key used by your database, you can't unencrypt the data without the key
  KmsKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Sub KMS Key for our ${AWS::StackName} Aurora, Elasticache and S3
      KeyPolicy:
        Id: !Ref AWS::StackName #You can also used the Environment name instead of the Stackname
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: "*"
          - Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds: !Ref DatabaseSubnets
      Tags:
        - Key: "Name"
          Value: !Join ["", [!Ref "AWS::StackName", "::DatabaseSubnetGroup"]]

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This is the database password for the Aurora Master Instance
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        GenerateStringKey: password
        PasswordLength: 40
        SecretStringTemplate: '{"username":"admin"}'
      Name: !Join ["", [!Ref "AWS::StackName", "-RDSMasterSecret"]]

  DatabaseSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: DatabaseSecret
      TargetId:
        Ref: DatabaseCluster
      TargetType: AWS::RDS::DBCluster

  # Aurora Database Cluster(s) confguration
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DependsOn:
      - DatabaseSecret
    Properties:
      Engine: aurora-mysql
      EngineVersion: 5.7.12
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DatabaseName:
        !If [
          UseAuroraSnapshot,
          !Ref "AWS::NoValue",
          !Join ["", [!Ref "AWS::StackName", "-database-cluster"]],
        ]
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            Ref: "AWS::StackName",
            "-RDSMasterSecret:SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            Ref: "AWS::StackName",
            "-RDSMasterSecret:SecretString:password}}",
          ],
        ]
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      KmsKeyId: !GetAtt KmsKey.Arn # At rest encryption key
      StorageEncrypted: true # At rest encryption enabled
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod:
        !If [CreateStagingResources, !Ref "AWS::NoValue", 7]
      PreferredBackupWindow:
        !If [CreateStagingResources, !Ref "AWS::NoValue", "05:00-09:00"]
      PreferredMaintenanceWindow:
        !If [CreateStagingResources, !Ref "AWS::NoValue", "sun:22:00-sun:23:30"]
      # TODO: Create a dedicated snapshot template to run only the db snapshot
      # SnapshotIdentifier:
      #   !If [UseAuroraSnapshot, !Ref AuroraSnapshotArn, !Ref "AWS::NoValue"]

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      EngineVersion: 5.7.12
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup

  RDSDBParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: "CloudFormation  Aurora Parameter Group"
      Family: aurora-mysql5.7

  # TODO: Remove Replica section and create a new stack using only replica for us-east-1 prod
  # Add more Read capability for production
  DatabaseReplicaInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DatabasePrimaryInstance
    Condition: CreateProdResources
    Properties:
      Engine: aurora-mysql
      EngineVersion: 5.7.12
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup

  #   Email subscription to database alarm
  #   Uncomment this if you want email subscription
  # AlarmTopic:
  #     Type: AWS::SNS::Topic
  #     Properties:
  #         Subscription:
  #             - Endpoint: email@gmail.com
  #               Protocol: email

  #   Alarm for primary database to monitor CPU usage
  DatabasePrimaryCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Primary database CPU utilization is over 80%.
      Namespace: AWS/RDS
      MetricName: CPUUtilization
      Unit: Percent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: DatabasePrimaryInstance
      # AlarmActions:
      #     - Ref: AlarmTopic
      # InsufficientDataActions:
      #     - Ref: AlarmTopic

  # TODO: Remove Replica section and create a new stack using only replica for us-east-1 prod
  #  Alarm for Read replicas to monitor CPU usage
  DatabaseReplicaCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdResources
    Properties:
      AlarmDescription: Replica database CPU utilization is over 80%.
      Namespace: AWS/RDS
      MetricName: CPUUtilization
      Unit: Percent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: DatabaseReplicaInstance
      #   AlarmActions:
      #       - Ref: AlarmTopic
      #   InsufficientDataActions:
      #       - Ref: AlarmTopic

  #   Alarm for primary database to monitor memory usage
  DatabasePrimaryMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Primary database freeable memory is under 700MB.
      Namespace: AWS/RDS
      MetricName: FreeableMemory
      Unit: Bytes
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 700000000
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: DatabasePrimaryInstance
      # AlarmActions:
      #     - Ref: AlarmTopic
      # InsufficientDataActions:
      #     - Ref: AlarmTopic

  # TODO: Remove Replica section and create a new stack using only replica for us-east-1 prod
  # Alarm for Read Replicas to monitor latency
  DatabaseReplicaReplicationAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdResources
    Properties:
      AlarmDescription: Database replication latency is over 200ms.
      Namespace: AWS/RDS
      MetricName: AuroraReplicaLag
      Unit: Milliseconds
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 200
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: DatabaseReplicaInstance
      #   AlarmActions:
      #       - Ref: AlarmTopic

  # TODO: Remove this section and create a redis cluster only stack
  # Redis cluster(s) configuration
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub ${EnvironmentName}-RedisSubnetGroup
      Description: Redis Subnet Group
      SubnetIds:
        - !Select [0, !Ref DatabaseSubnets] # Avalaibility Zone 1 (subnet 1)
        - !Select [1, !Ref DatabaseSubnets] # Avalaibility Zone 2 (subnet 2)

  # TODO: Remove this section and create a redis cluster only stack
  RedisClusters:
    Type: "AWS::ElastiCache::ReplicationGroup"
    DependsOn: RedisSubnetGroup
    Properties:
      TransitEncryptionEnabled: true # In-transit encrytion enabled
      AtRestEncryptionEnabled: true # At-rest encryption enabled
      AuthToken: !Ref RedisAUTHtoken # Redis password
      AutomaticFailoverEnabled: true # Automatically promote a Read Replica to a Primary Read/Write node if Read/Write node fail
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref RedisType # node type and size
      CacheParameterGroupName: default.redis5.0.cluster.on #Cluster mode enabled (Allow multiples shards/clusters)
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: "5.0.5"
      KmsKeyId: !GetAtt KmsKey.Arn # At-rest AWS-managed server-side encryption key
      NumNodeGroups: 1 # Number of shards/clusters
      Port: 6379
      ReplicasPerNodeGroup: !If [CreateStagingResources, 0, 1] # Number of Read replicas per shard/cluster. Up to 5 Read Replicas per shard.
      ReplicationGroupDescription: !Sub ${EnvironmentName} Redis Clusters
      ReplicationGroupId: !Sub ${EnvironmentName}-Redis-Clusters
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      SnapshotRetentionLimit: !If [
          CreateStagingResources,
          !Ref "AWS::NoValue",
          7,
        ] # Number of days to store backup before being deleted
      SnapshotWindow:
        !If [CreateStagingResources, !Ref "AWS::NoValue", "05:00-09:00"]
      PreferredMaintenanceWindow:
        !If [CreateStagingResources, !Ref "AWS::NoValue", "sun:22:00-sun:23:30"]
      SnapshotName:
        !If [UseRedisBackup, !Ref RedisBackupName, !Ref "AWS::NoValue"]
      #                 If you want to use the alternative configuration of passing parameter instead
      # SnapshotRetentionLimit: !Ref DatabaseBackupRetentionPeriod # Number of days to store backup before being deleted
      # SnapshotWindow: !Ref PreferredBackupWindow
      # PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow

  # TODO: Remove this section and create an s3 only stack
  # You can encrypt s3 with the KMS key in this stack, but you'll need to enable S3 Versioning first
  # You can store static contents (images, videos) or host pre-rendered or client-side rendered web app
  # Bucket:
  #     Type: AWS::S3::Bucket
  #     Properties:
  #         AccessControl: PublicRead

Outputs:
  AuroraClusterEndpointAddress:
    Description: Aurora cluster endpoint address
    Value: !GetAtt DatabaseCluster.Endpoint.Address

  AuroraClusterEndpointPort:
    Description: Aurora cluster endpoint port
    Value: !GetAtt DatabaseCluster.Endpoint.Port

  # Redis Cluster(s) endpoints and ports
  RedisClusterEndpointAddress:
    Description: Redis cluster endpoint address
    Value: !GetAtt RedisClusters.ConfigurationEndPoint.Address

  RedisClusterEndpointPort:
    Description: DB cluster endpoint port
    Value: !GetAtt RedisClusters.ConfigurationEndPoint.Port
  # # S3 bucket
  # S3BucketName:
  #     Description: S3 Bucket name
  #     Value: !Ref Bucket
