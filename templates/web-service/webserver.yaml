Description: >
  This template deploys an EC2 instance(s) to the provided VPC and subnets
  using an Auto Scaling Group behind an application load balancer, and an 
  A record in Route53 for the application load balancer

Parameters:
  # Easier to debug system and enable autoscaling group to perform rolling deployment
  # Reference: https://cloudonaut.io/rolling-update-with-aws-cloudformation/
  VersionParameter:
    Description: Software version to deploy
    Type: String
    Default: 1.0.0

  LinuxECSAmiId:
    Description: Recommended ECS-optimised Amazon Linux 2 ami
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    # obtain list with
    # aws ssm get-parameters-by-path --path /aws/service/ecs/optimized-ami/amazon-linux-2/recommended --recursive
    # This method automatically obtain an AMI based on the region
    # by calling the SSM public parameter to obtain the AMI in that region.
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"

  CertificateArn:
    Description: AWS ARN of the SSL certificate to be used by the ALB
    Type: String

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ""

  EnvironmentName:
    Description: Environment Type
    Type: String
    Default: Staging
    AllowedValues:
      - Staging
      - Prod

  InstanceType:
    Default: t3a.micro
    Description: Web Server instance types
    Type: String
    # EC2 instance type: https://aws.amazon.com/ec2/instance-types/
    AllowedValues:
      - t3a.micro
      - t3a.medium
      - t3a.large
      - m5a.large # m5 are for general purpose computing

  InitialNumberofWebServer:
    Description: How many EC2 instances do you want to initially deploy?
    Type: Number
    Default: 1

  MaximumNumberofWebServer:
    Description: Add a maximum number of EC2 instances allowed to be deployed by Autoscaling group
    Type: Number
    Default: 1

  VPC:
    Description: Choose which VPC the web application should be deployed to
    Type: AWS::EC2::VPC::Id

  PublicSubnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnets:
    Description: Choose which subnets which the web server should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  LBSecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id

  EC2SecurityGroup:
    Description: Select the Security Group to use for the web servers
    Type: AWS::EC2::SecurityGroup::Id

  RedisClusterEndpoint:
    Description: Endpoint for the Redis Cluster
    Type: String

Conditions:
  CreateProdResources: !Equals [!Ref EnvironmentName, Prod]
  CreateStagingResources: !Equals [!Ref EnvironmentName, Staging]
  useKeyPair: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: !Ref InitialNumberofWebServer
      MaxSize: !Ref MaximumNumberofWebServer
      DesiredCapacity: !Ref InitialNumberofWebServer
      TargetGroupARNs:
        - !Ref DefaultTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Server
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        # Maximum number of ec2 instances to replace at once with the new launch configuration
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  # TODO: Update Userdata for ecs-optimised instance. Current config is from previous project
  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref LinuxECSAmiId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref EC2SecurityGroup
      KeyName: !If [useKeyPair, !Ref KeyName, !Ref "AWS::NoValue"]
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum update -y
          yum install gnupg -yqq
          yum install -y gcc-c++ make

          # install node.js
          sudo curl -sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -
          sudo yum install -y nodejs

          # install php7.3 from amazon-linux-extra repository
          sudo amazon-linux-extras enable php7.3 redis4.0
          sudo yum install -y httpd php-mysqlnd php-mbstring php-fpm php-cli php-xml stunnel mod_ssl
          service httpd start
          chkconfig httpd on

          # install composer
          sudo curl -sS https://getcomposer.org/installer | sudo php
          sudo mv composer.phar /usr/bin/composer
          sudo ln -s /usr/bin/composer /usr/local/bin/composer
          sudo chmod +x /usr/bin/composer
          export HOME=/root

          # install git
          sudo yum install -y git

          # Install project


          #add ec2-user to apache group
          usermod -a -G apache ec2-user

          #Install project dependencies


          #Give the right permissions to /var/www/html
          sudo chown root:root /var/www/html
          sudo chmod 755 /var/www/html

          #Give these permissions to your project


          # overwrite apache configuration
          cd ~
          sudo git clone 
          sudo cp -fr aws-infrastructure/configuration-scripts/httpd.conf /etc/httpd/conf/httpd.conf
          sudo cp -fr aws-infrastructure/configuration-scripts/ssl.conf /etc/httpd/conf.d/ssl.conf
          sudo cp -fr aws-infrastructure/configuration-scripts/stunnel-config.sh /etc/stunnel/stunnel-config.sh
          sudo rm -rf aws-infrastructure

          cd /etc/stunnel/
          # Run script to make redis-cli.conf file
          sudo sh stunnel-config.sh ${RedisClusterEndpoint} 6379

          # Run stunnel
          sudo stunnel redis-cli.conf
          cd ~

          echo "Version:" ${VersionParameter}
          # Restart apache
          sudo service httpd restart

          # Send a signal to Autoscaling group that EC2 is ready
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2AutoScalingGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LBSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    UpdateReplacePolicy: Retain
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    UpdateReplacePolicy: Retain
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener.
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub ${EnvironmentName}-TargetGroup
      VpcId: !Ref VPC
      Port: 443
      Protocol: HTTPS
      HealthCheckPath: /
      HealthCheckPort: "443"
      HealthCheckTimeoutSeconds: 5
      TargetType: instance
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 300

  # If this resource is failing to create, it means that another load balancer alias is being used
  # AddApplicationLoadBalancerAlias:
  #     Type: 'AWS::Route53::RecordSet'
  #     UpdateReplacePolicy: Retain
  #     Properties:
  #         HostedZoneName: example.com.
  #         Name: staging.example.com.
  #         Type: A
  #         AliasTarget:
  #             HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
  #             DNSName: !GetAtt LoadBalancer.DNSName
  #             EvaluateTargetHealth: 'false'

Outputs:
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  ListenerHTTP:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListenerHTTP

  ListenerHTTPS:
    Description: A reference to a port 443 listener
    Value: !Ref LoadBalancerListenerHTTPS
