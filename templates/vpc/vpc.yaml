AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template deploys the aws infrastructure needed to support a dualstack IPv4 and IPv6 VPC network, 
  with a pair of public and private subnets spread across three Availabilty Zones.

Metadata:
  License: Apache 2.0
  Author: Norman Wong Chiew Look

Parameters:
  EnvironmentName:
    Description: Environment Type
    Type: String
    Default: Staging
    AllowedValues:
      - Staging
      - Prod-ap-southeast-2
      - Prod-us-east-1

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

Resources:
  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  # Tell Amazon to allocate an IPv6 Cidr block for this VPC
  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  #######################
  # Create gateways     #
  #######################
  # Allow outbound-only communication over IPv6 in the VPC to the internet
  EgressOnlyInternetGateway:
    Type: "AWS::EC2::EgressOnlyInternetGateway"
    Properties:
      VpcId: !Ref VPC

  # Allow communication to and from the internet over IPv4 and IPv6 in this VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Allocate a static Public IPv4 IP for this gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # Allow only IPv4 outbound traffic to the internet
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  ##########################
  # Create route table     #
  ##########################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  ####################################
  # Associate gateway to route table #
  ####################################
  IPv6PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway

  IPv6PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref PrivateRouteTable
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv4PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway

  IPv4PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway

  ##########################
  # Create Public subnets  #
  ##########################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ]
      ########################################################################################
      # The following does not work because of a EC2 API Bug:                                #
      #   "AssignIpv6AddressOnCreation: true" doesn't work if "MapPublicIpOnLaunch: true"    #
      # Reference: https://forums.aws.amazon.com/thread.jspa?threadID=267641                 #
      ########################################################################################
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 6, 13]]
      Ipv6CidrBlock:
        !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 6, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 6, 13]]
      Ipv6CidrBlock:
        !Select [3, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 6, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 6, 13]]
      Ipv6CidrBlock:
        !Select [5, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 6, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  ##########################
  # Create Private subnets #
  ##########################
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      # Create an array with 6 CIDRs with subnet mask "/19" from the "/16" Cidr, and
      # return the first value in the array
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 6, 13]]
      Ipv6CidrBlock:
        # Create an array with 6 CIDRs with subnet mask "/64" from the "/56" Cidr, and
        # return the first value in the array
        !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 6, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 6, 13]]
      Ipv6CidrBlock:
        !Select [2, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 6, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 6, 13]]
      Ipv6CidrBlock:
        !Select [4, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 6, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  #############################################################
  # Associate subnets to either public or private route table #
  #############################################################
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  ########################################
  # Workaround to fix the ec2 api bug    #
  # by using lambda as a duct tape       #
  ########################################
  # Temporary credential for lambda to create logs in cloudwatch and change the subnet attribute
  IPv6WorkaroundRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "ipv6-fix-logs-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub "ipv6-fix-modify-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifySubnetAttribute
                Resource: "*"

  IPv6WorkaroundLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Code: # import cfnresponse below required to send respose back to CFN
        ZipFile:
          Fn::Sub: |
            import cfnresponse
            import boto3

            def lambda_handler(event, context):
                if event['RequestType'] is 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS)

                responseValue = event['ResourceProperties']['SubnetId']
                ec2 = boto3.client('ec2', region_name='${AWS::Region}')
                ec2.modify_subnet_attribute(AssignIpv6AddressOnCreation = {
                    'Value': True
                }, SubnetId=responseValue)
                responseData = {}
                responseData['myReturnValue'] = responseValue
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Runtime: "python3.7"
      Role: !GetAtt IPv6WorkaroundRole.Arn
      Timeout: 30
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} IPv6WorkaroundLambda
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  #################################################
  # Subnets ID inputs for IPv6WorkaroundLambda    #
  #################################################
  IPv6WorkaroundPublicSubnetA:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PublicSubnet1

  IPv6WorkaroundPublicSubnetB:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PublicSubnet2

  IPv6WorkaroundPublicSubnetC:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PublicSubnet3

  IPv6WorkaroundPrivateSubnetA:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PrivateSubnet1

  IPv6WorkaroundPrivateSubnetB:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PrivateSubnet2

  IPv6WorkaroundPrivateSubnetC:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PrivateSubnet3
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::VPC-ID"]]

  VPCCidrBlock:
    Description: VPC IPv4 Cidr Block
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::VPC-CidrBlock"]]

  PublicSubnets:
    Description: A list of the public subnets
    Value:
      !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-List"]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value:
      !Join [
        ",",
        [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3],
      ]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PrivateSubnet-List"]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-1"]]

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-2"]]

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-3"]]

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PrivateSubnet-1"]]

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PrivateSubnet-2"]]

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PrivateSubnet-3"]]

  NatGateway1EIP:
    Description: NAT Gateway 1 IP address
    Value: !Ref NatGatewayEIP
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::NATGateway-1"]]

  PublicRouteTable:
    Description: A reference to the public route table ID
    Value: !Ref PublicRouteTable
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicRouteTable"]]

  PrivateRouteTable:
    Description: A reference to the private route-table ID
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PrivateRouteTable"]]
